
```{julia}
    # # first, we calculate the cost of elevating the house
    # construction_cost = elevation_cost(p.house, a.Δh_ft) + cost_of_action(buffer_height_free,freeboard_height_free)

    # # we don't need to recalculate the steps of the trapezoidal integral for each year
    # storm_surges_ft = range(
    #     quantile(sow.surge_dist, 0.0005); stop=quantile(sow.surge_dist, 0.9995), length=130
    # )

    # eads = map(p.years) do year
    #     # get the sea level for this year
    #     slr_ft = sow.slr(year)

    #     # Add n_levels in the first year
    #     if year == 2024
    #         a.Δh_ft += a.n_levels
    #     end
        
    #     # Compute EAD using trapezoidal rule
    #     pdf_values = pdf.(sow.surge_dist, storm_surges_ft) # probability of each
    #     depth_ft_gauge = storm_surges_ft .+ slr_ft # flood at gauge
    #     depth_ft_house = depth_ft_gauge .- (p.house.height_above_gauge_ft + a.Δh_ft) # flood @ house
    #     damages_frac = p.house.ddf.(depth_ft_house) ./ 100 # damage
    #     weighted_damages = damages_frac .* pdf_values # weighted damage
    #     # Trapezoidal integration of weighted damages
    #     ead = trapz(storm_surges_ft, weighted_damages) * p.house.value_usd
    # end

    # years_idx = p.years .- minimum(p.years)
    # discount_fracs = (1 - sow.discount_rate) .^ years_idx
    # ead_npv = sum(eads .* discount_fracs)
    # return -(ead_npv + construction_cost)
```



```{julia}
function cost_of_action(a::Action, house::House, buffer_height::Float64, freeboard_height::Float64)
    # Perform a linear regression to find the slope
    fit <- lm(Damages ~ Flood, data = haz_fl_dept)
    slope <- coef(fit)["Flood"]

    # Perform a quadratic regression to find the acceleration
    fit2 <- lm(Damages ~ Flood + I(Flood^2), data = haz_fl_dept)
    acceleration <- coef(fit2)["I(Flood^2)"]

    # slopes = diff(damage_levels)
    # local_slope = mean(slopes)
    # acceleration = std(slopes)  # Using standard deviation as a simple proxy for acceleration
    # Define buffer height and freeboard based on calculated local slope and acceleration
    buffer_height = slope + acceleration  # Example formula
    freeboard = 2.0  # Fixed additional height for safety

    # base_cost = ... # calculate base cost based on action and house
    buffer_cost = buffer_height * 1000  # calculate additional cost based on buffer height
    freeboard_cost = freeboard_height * 1000  # calculate additional cost based on freeboard height
    return buffer_cost + freeboard_cost
end
```






```{julia}

# Define your optimization problem
bounds = [(0.0, p.house.height_above_gauge_ft + p.buffer_height + p.freeboard_height)]
result = optimize(Δh -> objective_function(Δh), bounds)

# Calculate the mean NPV, optimal NPV, and optimal elevation
mean_npv = -objective_function(result.minimizer)
optimal_npv = -result.minimum
optimal_elevation = result.minimizer
```








```{julia}



# Modify objective function to pass buffer height and freeboard height to run_sim
# function objective_function(Δh::Float64)
#     a = Action(Δh)
#     npvs = [run_simulation(a, sow, p, p.buffer_height, p.freeboard_height) for sow in sows_opt]
#     return -mean(npvs)
# end


function calculate_buffer_height(haz_fl_dept, desc)
    # Filter the data based on the description
    row = @rsubset(haz_fl_dept, :Description .== desc)

    # Perform a linear regression to find the slope
    fit = lm(@formula(Damages ~ Flood), row)
    slope = coef(fit)[2]  # The slope is the second coefficient

    # Perform a quadratic regression to find the acceleration
    fit2 = lm(@formula(Damages ~ Flood + I(Flood^2)), row)
    acceleration = coef(fit2)[3]  # The acceleration is the third coefficient

    # Define buffer height based on calculated local slope and acceleration
    buffer_height = slope + acceleration  # Example formula

    return buffer_height
end
# function calculate_buffer_height(haz_fl_dept, desc)
#     # Filter the data based on the description
#     row = @rsubset(haz_fl_dept, :Description == desc)[1, :]

#     # Perform a linear regression to find the slope
#     fit <- lm(Damages ~ Flood, data = row)
#     slope <- coef(fit)["Flood"]

#     # Perform a quadratic regression to find the acceleration
#     fit2 <- lm(Damages ~ Flood + I(Flood^2), data = row)
#     acceleration <- coef(fit2)["I(Flood^2)"]

#     # Define buffer height based on calculated local slope and acceleration
#     buffer_height = slope + acceleration  # Example formula

#     return buffer_height
# end
```

```{julia}




# # Modify objective function to pass buffer height and freeboard height to run_sim
# function objective_function(Δh::Vector{Float64})
#     a = Action(Δh[1])
#     npvs = [run_simulation(a, sow, p, p.buffer_height, p.freeboard_height) for sow in sows_opt]
#     return -mean(npvs)
# end







# # Define your optimization problem
# bounds = [(0.0, p.house.height_above_gauge_ft + p.buffer_height + p.freeboard_height)]
# result = optimize(Δh -> objective_function(Δh, p), bounds)

# # Calculate the mean NPV, optimal NPV, and optimal elevation
# mean_npv = -objective_function(result.minimizer, p)
# optimal_npv = -result.minimum
# optimal_elevation = result.minimizer[1]

# # Define your optimization problem
# bounds = [(0.0, p.house.height + p.buffer_height + p.freeboard_height)]
# result = optimize(Δh -> objective_function(Δh, p), bounds)

# # Calculate the mean NPV, optimal NPV, and optimal elevation
# mean_npv = -objective_function(result.minimizer, p)
# optimal_npv = -result.minimum
# optimal_elevation = result.minimizer[1]

# # Define your optimization problem
# bounds = [(0.0, p.house.h_ft + p.buffer_height + p.freeboard_height)]
# result = optimize(Δh -> objective_function(Δh, p), bounds)

# # Calculate the mean NPV, optimal NPV, and optimal elevation
# mean_npv = -objective_function(result.minimizer, p)
# optimal_npv = -result.minimum
# optimal_elevation = result.minimizer[1]

# # Find optimal NPV and corresponding elevation
# result = optimize(objective_function, bounds)
# optimal_npv = -minimum(result)
# optimal_elevation = minimizer(result)
```



```{julia}
data = CSV.read("data/haz_fl_dept.csv", DataFrame)
desc = "one story, Contents, fresh water, short duration"
row = @rsubset(data, :Description == desc)[1, :]

house_area = 500u"ft^2"
house_height = 12u"ft"
house_value = 250_000

house = House(row; area=house_area, height_above_gauge=house_height, value_usd=house_value)

model_params = ModelParams(house=house, years=2024:2083)
```

```{julia}
struct AdaptiveElevationPolicy
    buffer_height::Float64
    freeboard::Float64
end

# Example: Policy with a static buffer height and freeboard
policy_params = AdaptiveElevationPolicy(buffer_height=0.5, freeboard=1.0)
```


```{julia}
function simulate_elevation(state::ElevationState, policy::AdaptiveElevationPolicy, model_params::ModelParams)
    npvs = []
    for year in state.year:(state.year + length(model_params.years) - 1)
        elevation_change = decide_elevation_action(state, policy)
        state.current_elevation += elevation_change

        # Simulate and calculate NPV
        action = Action(elevation_change)
        sow = SOW(state.slr_scenario, state.surge_distribution, state.discount_rate)
        npv = run_sim(action, sow, model_params)
        push!(npvs, npv)

        # Update state
        state.year = year + 1
        slr_ft_this_year = compute_slr(state.slr_scenario, year)
        new_flood_level = rand(state.surge_distribution) + slr_ft_this_year
        push!(state.historical_flood_levels, new_flood_level)
    end
    return mean(npvs)
end
```

```{julia}
initial_state = ElevationState(
    2024, 12.0, [10.5, 11.0, 11.5], 
    slr_scenarios[1], draw_surge_distribution(), draw_discount_rate()
)

# Run the simulation
final_npv = simulate_elevation(initial_state, policy_params, model_params)
println("Average NPV after 30 years: $final_npv")
```





# Sequential Analysis

```{julia}
mutable struct ElevationState
    year::Int
    current_elevation::Float64
    historical_flood_levels::Vector{Float64}
    slr_scenario::Oddo17SLR  # Specific SLR scenario
    surge_distribution::Distribution  # Storm surge distribution
    discount_rate::Float64  # Discount rate for NPV calculations
end
```

```{julia}
struct AdaptiveElevationPolicy
    buffer_height::Float64
    freeboard::Float64
end

# Read the data
data = CSV.read("data/haz_fl_dept.csv", DataFrame)

# Find the relevant row (for example, one story house)
desc = "one story, Contents, fresh water, short duration"
row = @rsubset(data, :Description == desc)[1, :]

function calculate_policy_params(row::DataFrameRow)
    # Extract damage levels. Assume damage levels start from ft00 to ft06 for simplicity.
    # You need to adjust these to match your actual data columns and range.
    damage_levels = [row[:ft00], row[:ft01], row[:ft02], row[:ft03], row[:ft04], row[:ft05], row[:ft06]]

    # Calculate the slope between consecutive damage levels to represent the local slope
    slopes = diff(damage_levels)
    local_slope = mean(slopes)
    acceleration = std(slopes)  # Using standard deviation as a simple proxy for acceleration

    # Define buffer height and freeboard based on calculated local slope and acceleration
    buffer_height = local_slope * 10 + acceleration * 100  # Example formula
    freeboard = 2.0  # Fixed additional height for safety

    return AdaptiveElevationPolicy(buffer_height, freeboard)
    
end

function compute_slr(slr_scenario::Oddo17SLR, year::Int)
    base_year = 2024  # adjust based on your dataset or model details
    t = year - base_year
    slr_ft = slr_scenario.a + slr_scenario.b * t + slr_scenario.c * t^2  # example quadratic model
    return slr_ft
end

function update_slr_scenario(old_slr_scenario::Oddo17SLR, year::Int)
    # Placeholder: Calculate new parameters based on time or other factors
    # For now, let's assume it remains constant or provide a mechanism to update it
    return old_slr_scenario  # Modify this line according to actual updating logic
end
```

```{julia}

function simulate_elevation(state::ElevationState, num_years::Int, policy::AdaptiveElevationPolicy, model_params::ModelParams)
    npvs = []
    for year in state.year:(state.year + num_years - 1)
        elevation_change = decide_elevation_action(state, policy)
        state.current_elevation += elevation_change

        # Update the SLR scenario for the current year
        updated_slr_scenario = update_slr_scenario(state.slr_scenario, year)

        # Reconstruct the SOW with the updated SLR scenario
        sow = SOW(updated_slr_scenario, state.surge_distribution, state.discount_rate)

        # Calculate NPV from this year's decision
        action = Action(elevation_change)
        npv = run_sim(action, sow, model_params)
        push!(npvs, npv)

        # Update state for the next year
        state.year = year + 1
        slr_ft_this_year = compute_slr(updated_slr_scenario, year)  # Assuming compute_slr works with Oddo17SLR
        new_flood_level = rand(state.surge_distribution) + slr_ft_this_year
        push!(state.historical_flood_levels, new_flood_level)

        # Update the state's SLR scenario
        state.slr_scenario = updated_slr_scenario
    end
    return mean(npvs)
end
```

```{julia}

function decide_elevation_action(state::ElevationState, policy::AdaptiveElevationPolicy)
    # Calculate current year's sea level rise
    projected_slr_this_year = compute_slr(state.slr_scenario, state.year)

    # Compute projected flood risk based on historical max flood level and current year's SLR
    projected_flood_risk = maximum(state.historical_flood_levels; init=0) + projected_slr_this_year
    
    # Calculate required elevation including buffer and freeboard
    required_elevation = state.current_elevation + policy.buffer_height + policy.freeboard

    # Decide on the elevation change needed
    if projected_flood_risk > state.current_elevation + policy.buffer_height
        return required_elevation - state.current_elevation
    else
        return 0.0
    end
end
```

```{julia}

model_params = p
initial_slr_scenario = slr_scenarios[1]  # Choose a scenario, for example
initial_state = ElevationState(2024, 12.0, [10.5, 11.0, 11.5], initial_slr_scenario, draw_surge_distribution(), draw_discount_rate())
policy_params = calculate_policy_params(0.02, 0.0005)  # Placeholder for your policy calculation

# Run the simulation
final_npv = simulate_elevation(initial_state, 30, policy_params, model_params)
println("Average NPV after 30 years: $final_npv")

# # Initial conditions
# initial_state = ElevationState(2024, 12.0, [10.5, 11.0, 11.5], 0.1, 0.02, 0.0005)
# policy_params = calculate_policy_params(initial_state.local_slope, initial_state.acceleration)

# Simulation over 30 years
# final_state = simulate_elevation(initial_state, 30, policy_params)
# println("Final elevation after 30 years: $(final_npv.current_elevation)")
```

```{julia}
#| output: false
elevations_try = 0:0.5:14
actions_try = Action.(elevations_try)

N_more = 500
npvs_opt = [mean([run_sim(a, sow, p) for sow in sows_opt]) for a in actions_try]
npvs_moore = [
    mean([run_sim(a, sow, p) for sow in first(sows, N_more)]) for a in actions_try
]
```













```{julia}

```


```{julia}
# Define the same model parameters and state of the world as used in the earlier optimization
# include("model_definitions.jl")  # Assuming definitions are stored here

# Ensure there is at least one element when initialized
initial_state = ElevationState(2024, 12.0, [10.5], 0.1, 0.02, 0.0005)



function evaluate_sequential_policy(Δh::Vector{Float64})
    # Initialize with at least one historical flood level
    
    initial_state = ElevationState(2024, Δh[1], [10.5], 0.1, 0.02, 0.0005)
    policy_params = calculate_policy_params(0.02, 0.0005)
    # npvs = [simulate_elevation(a, sow, p) for sow in sows_opt]
    # return -mean(npvs)
    # Simulate for a set number of years
    # final_state = simulate_elevation(initial_state, 59, policy_params)  # Run until 2083 for comparison
    
    # npvs = [simulate_elevation(initial_state, 59, policy_params) for sow in sows_opt]
    
    npvs = simulate_elevation(initial_state, 59, policy_params) 

    # Assuming a function to calculate NPV based on final elevation and flood risk
    # npv = calculate_npv(final_state)  # Define this function based on your economic model
    
    return -mean(npvs)  # Return negative NPV for minimization
    # function objective_function(Δh::Vector{Float64})
    #     a = Action(Δh[1])
    #     npvs = [run_sim(a, sow, p) for sow in sows_opt]
    #     return -mean(npvs)
    # end
end

# Optimization setup
bounds = boxconstraints(; lb=[0.0], ub=[14.0])
options = Options(; time_limit=180.0, f_tol_rel=10.0)
algorithm = ECA(; options=options)

# Optimize the sequential policy
result_seq = optimize(evaluate_sequential_policy, bounds, algorithm)

println("Minimum NPV for sequential analysis: $(minimum(result_seq))")
println("Optimal elevation for sequential analysis: $(minimizer(result_seq))")

# Now you can directly compare this result with the one from the original optimization
```





































```{julia}
# Function to simulate and evaluate NPV for the sequential adaptive policy
# function evaluate_sequential_policy(Δh::Vector{Float64})
#     initial_state = ElevationState(2024, Δh[1], [], 0.1, 0.02, 0.0005)
#     policy_params = calculate_policy_params(0.02, 0.0005)  # Use real or simulated slope and acceleration

#     # Simulate for a set number of years
#     final_state = simulate_elevation(initial_state, 59, policy_params)  # Run until 2083 for comparison

#     # Assuming a function to calculate NPV based on final elevation and flood risk
#     npv = calculate_npv(final_state)  # Define this function based on your economic model
#     return -npv  # Return negative NPV for minimization
# end

# Define the same model parameters and state of the world as used in the earlier optimization
# include("model_definitions.jl")  # Assuming definitions are stored here

# Ensure there is at least one element when initialized
initial_state = ElevationState(2024, 12.0, [10.5], 0.1, 0.02, 0.0005)


function evaluate_sequential_policy(Δh::Vector{Float64})
    # Initialize with at least one historical flood level
    
    initial_state = ElevationState(2024, Δh[1], [10.5], 0.1, 0.02, 0.0005)
    policy_params = calculate_policy_params(0.02, 0.0005)
    # npvs = [simulate_elevation(a, sow, p) for sow in sows_opt]
    # return -mean(npvs)
    # Simulate for a set number of years
    # final_state = simulate_elevation(initial_state, 59, policy_params)  # Run until 2083 for comparison
    npvs = [simulate_elevation(initial_state, 59, policy_params) for sow in sows_opt]
    # Assuming a function to calculate NPV based on final elevation and flood risk
    # npv = calculate_npv(final_state)  # Define this function based on your economic model
    return -mean(npvs)  # Return negative NPV for minimization
    # function objective_function(Δh::Vector{Float64})
    #     a = Action(Δh[1])
    #     npvs = [run_sim(a, sow, p) for sow in sows_opt]
    #     return -mean(npvs)
    # end
end

# Optimization setup
bounds = boxconstraints(; lb=[0.0], ub=[14.0])
options = Options(; time_limit=180.0, f_tol_rel=10.0)
algorithm = ECA(; options=options)

# Optimize the sequential policy
result_seq = optimize(evaluate_sequential_policy, bounds, algorithm)

println("Minimum NPV for sequential analysis: $(minimum(result_seq))")
println("Optimal elevation for sequential analysis: $(minimizer(result_seq))")

# Now you can directly compare this result with the one from the original optimization
```

```{julia}
function objective_function(Δh::Vector{Float64})
    a = Action(Δh[1])
    npvs = [run_sim(a, sow, p) for sow in sows_opt]
    return -mean(npvs)
end
```

```{julia}
result = optimize(objective_function, bounds)
```

```{julia}
# mutable struct ElevationState
#     year::Int
#     current_elevation::Float64
#     historical_flood_levels::Vector{Float64}
#     slr_projection::Float64
#     local_slope::Float64  # Local rate of sea-level rise
#     acceleration::Float64  # Acceleration of sea-level rise
# end

# mutable struct ElevationState
#     year::Int
#     current_elevation::Float64
#     historical_flood_levels::Vector{Float64}
#     slr_model::Function  # Function to calculate SLR based on the year
#     surge_distribution::Distribution  # Storm surge distribution
#     discount_rate::Float64  # Discount rate for NPV calculations
# end
```

```{julia}
# # Function to calculate buffer height and freeboard based on local slope and acceleration
# function calculate_policy_params(local_slope, acceleration)
#     buffer_height = local_slope * 10 + acceleration * 100  # Example formula
#     freeboard = 2.0  # Fixed additional height for safety
#     return AdaptiveElevationPolicy(buffer_height, freeboard)
# end

# Calculate policy parameters using the row
# policy_params = calculate_policy_params(row)

# function calculate_policy_params(row)
#     # Assuming 'row' is a DataFrame row containing damage function data
#     # Extract damage percentages at different flood levels
#     damage_levels = [row.ft00, row.ft01, row.ft02, row.ft03, row.ft04, row.ft05, row.ft06]

#     # Calculate the slope between consecutive damage levels
#     slopes = diff(damage_levels)
#     local_slope = mean(slopes)
#     acceleration = std(slopes)  # Simple proxy for acceleration

#     # Define buffer height and freeboard based on local_slope and acceleration
#     buffer_height = local_slope * 10 + acceleration * 100  # Example formula
#     freeboard = 2.0  # Fixed additional height for safety
    
#     return AdaptiveElevationPolicy(buffer_height, freeboard)
# end

# function compute_slr(slr_model::Oddo17SLR, year::Int)
#     # Example calculation, adjust according to the specific fields and formula in Oddo17SLR
#     base_year = 2024
#     t = year - base_year
#     slr_ft = slr_model.a + slr_model.b * t + slr_model.c * t^2  # Assuming a quadratic model for example
#     return slr_ft
# end
```

```{julia}
# function decide_elevation_action(state::ElevationState, policy::AdaptiveElevationPolicy)
#     projected_flood_risk = maximum(state.historical_flood_levels) + state.slr_projection
#     required_elevation = state.current_elevation + policy.buffer_height + policy.freeboard

#     if projected_flood_risk > state.current_elevation + policy.buffer_height
#         return required_elevation - state.current_elevation  # Elevation change needed
#     else
#         return 0.0  # No elevation change needed
#     end
# end

# function decide_elevation_action(state::ElevationState, policy::AdaptiveElevationPolicy)
#     # Use a default value (such as the current sea level projection) if the collection is empty
#     projected_flood_risk = maximum(state.historical_flood_levels; init=state.slr_projection) + state.slr_projection
#     required_elevation = state.current_elevation + policy.buffer_height + policy.freeboard

#     if projected_flood_risk > state.current_elevation + policy.buffer_height
#         return required_elevation - state.current_elevation
#     else
#         return 0.0
#     end
# end
```

```{julia}
# function get_npv_value(state::ElevationState)
#     # Example: Assuming you have a method to calculate the NPV from an ElevationState
#     return calculate_npv(state)  # You'll need to define this function
# end
```

```{julia}
# function simulate_elevation(state::ElevationState, num_years::Int, policy::AdaptiveElevationPolicy, model_params::ModelParams)
#     npvs = []
#     for year in state.year:(state.year + num_years - 1)
#         elevation_change = decide_elevation_action(state, policy)
#         state.current_elevation += elevation_change

#         # Compute SLR for this year using the stored SLR scenario
#         slr_ft_this_year = compute_slr(state.slr_scenario, year)
        
#         # Update the SOW for this year
#         sow = SOW(slr_ft_this_year, state.surge_distribution, state.discount_rate)

#         # Calculate NPV from this year's decision
#         action = Action(elevation_change)
#         npv = run_sim(action, sow, model_params)
#         push!(npvs, npv)

#         # Update state for the next year
#         state.year = year + 1
#         new_flood_level = rand(state.surge_distribution) + slr_ft_this_year
#         push!(state.historical_flood_levels, new_flood_level)
#     end
#     return mean(npvs)
# end

# function simulate_elevation(state::ElevationState, num_years::Int, policy::AdaptiveElevationPolicy, model_params::ModelParams)
#     npvs = []
#     for year in state.year:(state.year + num_years - 1)
#         elevation_change = decide_elevation_action(state, policy)
#         state.current_elevation += elevation_change

#         # Compute SLR for this year using the stored SLR scenario
#         slr_ft_this_year = compute_slr(state.slr_scenario, year)
        
#         # Construct SOW for this year
#         sow = SOW(slr_ft_this_year, state.surge_distribution, state.discount_rate)

#         # Calculate NPV from this year's decision
#         action = Action(elevation_change)
#         npv = run_sim(action, sow, model_params)
#         push!(npvs, npv)

#         # Update state for next year
#         state.year = year + 1
#         new_flood_level = rand(state.surge_distribution) + slr_ft_this_year
#         push!(state.historical_flood_levels, new_flood_level)
#     end
#     return mean(npvs)
# end

# function simulate_elevation(state::ElevationState, num_years::Int, policy::AdaptiveElevationPolicy, model_params::ModelParams)
#     npvs = []
#     for year in state.year:(state.year + num_years - 1)
#         elevation_change = decide_elevation_action(state, policy)
#         state.current_elevation += elevation_change

#         # Construct action and SOW for this year
#         action = Action(elevation_change)
#         slr_ft_this_year = state.slr_model(year)
#         sow = SOW(slr_ft_this_year, state.surge_distribution, state.discount_rate)

#         # Calculate NPV from this year's decision
#         npv = run_sim(action, sow, model_params)
#         push!(npvs, npv)

#         # Update state for next year
#         state.year = year + 1
#         new_flood_level = rand(state.surge_distribution) + slr_ft_this_year
#         push!(state.historical_flood_levels, new_flood_level)
#     end
#     return mean(npvs)
# end

# function simulate_elevation(state::ElevationState, num_years::Int, policy::AdaptiveElevationPolicy)
#     for year in 1:num_years
#         elevation_change = decide_elevation_action(state, policy)
#         state.current_elevation += elevation_change
#         # Update the sea-level rise projection
#         state.slr_projection += state.local_slope + state.acceleration * year
#         # Simulate a new flood level and add to historical flood levels
#         new_flood_level = rand(Normal(state.slr_projection, 0.5))
#         push!(state.historical_flood_levels, new_flood_level)
#         state.year += 1
#     end
#     # return state
#     return calculate_npv(state)  # Ensure this function returns a numerical value

# end
```

```{julia}
# # Assume these are defined or derived from the setup section
# model_params = p
# initial_state = ElevationState(2024, 12.0, [10.5, 11.0, 11.5], p.house.slr_model, draw_surge_distribution(), draw_discount_rate())
# policy_params = calculate_policy_params(initial_state.slr_model(2024), 0.0005)  # assuming these parameters

# # Run the simulation
# final_npv = simulate_elevation(initial_state, 30, policy_params, model_params)
# println("Average NPV after 30 years: $final_npv")
```

```{julia}
# function decide_elevation_action(state::ElevationState, policy::AdaptiveElevationPolicy)
#     projected_flood_risk = maximum(state.historical_flood_levels; init=0) + state.slr_model(state.year)
#     required_elevation = state.current_elevation + policy.buffer_height + policy.freeboard

#     if projected_flood_risk > state.current_elevation + policy.buffer_height
#         return required_elevation - state.current_elevation
#     else
#         return 0.0
#     end
# end
```



```{julia}
# # Initial conditions
# initial_state = ElevationState(2024, 12.0, [10.5, 11.0, 11.5], 0.1, 0.02, 0.0005)
# policy_params = calculate_policy_params(initial_state.local_slope, initial_state.acceleration)

# # Simulation over 30 years
# final_state = simulate_elevation(initial_state, 30, policy_params)
# println("Final elevation after 30 years: $(final_state.current_elevation)")
```




```{julia}
mutable struct ElevationState
    year::Int
    current_elevation::Float64
    historical_flood_levels::Vector{Float64}
    slr_projection::Float64
    local_slope::Float64  # Local rate of sea-level rise
    acceleration::Float64  # Acceleration of sea-level rise
end
```

```{julia}
struct AdaptiveElevationPolicy
    buffer_height::Float64
    freeboard::Float64
end 

# Function to calculate buffer height and freeboard based on local slope and acceleration
function calculate_policy_params(local_slope, acceleration)
    buffer_height = local_slope * 10 + acceleration * 100  # Example formula
    freeboard = 2.0  # Fixed additional height for safety
    return AdaptiveElevationPolicy(buffer_height, freeboard)
end
```

```{julia}
function decide_elevation_action(state::ElevationState, policy::AdaptiveElevationPolicy)
    projected_flood_risk = maximum(state.historical_flood_levels) + state.slr_projection
    required_elevation = state.current_elevation + policy.buffer_height + policy.freeboard

    if projected_flood_risk > state.current_elevation + policy.buffer_height
        return required_elevation - state.current_elevation  # Elevation change needed
    else
        return 0.0  # No elevation change needed
    end
end
```

```{julia}
function simulate_elevation(state::ElevationState, num_years::Int, policy::AdaptiveElevationPolicy)
    for year in 1:num_years
        elevation_change = decide_elevation_action(state, policy)
        state.current_elevation += elevation_change
        # Update the sea-level rise projection
        state.slr_projection += state.local_slope + state.acceleration * year
        # Simulate a new flood level and add to historical flood levels
        new_flood_level = rand(Normal(state.slr_projection, 0.5))
        push!(state.historical_flood_levels, new_flood_level)
        state.year += 1
    end
    return state
end
```

```{julia}
# Initial conditions
initial_state = ElevationState(2024:2083, 12.0, [10.5, 11.0, 11.5], 0.1, 0.02, 0.0005)
policy_params = calculate_policy_params(initial_state.local_slope, initial_state.acceleration)

# Simulation over 30 years
final_state = simulate_elevation(initial_state, 30, policy_params)
println("Final elevation after 30 years: $(final_state.current_elevation)")
```














<!-- 
```{julia}
struct HouseElevationState
    year::Int
    current_elevation::Float64
    historical_flood_levels::Vector{Float64}
    slr_projection::Float64  # Sea-level rise projection for the house's location

    # Define a constructor with default values
    HouseElevationState(year::Int, current_elevation::Float64; 
                        historical_flood_levels::Vector{Float64} = Float64[], 
                        slr_projection::Float64 = 0.0) = 
                        new(year, current_elevation, historical_flood_levels, slr_projection)
end

struct HouseElevationAction
    adjust_elevation: Float64  # Additional elevation in feet
end
```


```{julia}
function get_elevation_action(state::HouseElevationState, policy_params)
    # Simple rule-based adaptive policy
    if state.historical_flood_levels[end] + state.slr_projection > state.current_elevation
        # If the projected flood level for the next year exceeds the current elevation
        return HouseElevationAction(1.0)  # Elevate the house by 1 foot
    else
        return HouseElevationAction(0.0)  # No change
    end
end
```



```{julia}
function simulate_house_elevation(policy_params, initial_state::HouseElevationState, num_years::Int)
    state = initial_state
    for year in 1:num_years
        action = get_elevation_action(state, policy_params)
        state.current_elevation += action.adjust_elevation
        
        # Update state with new flood levels and SLR projections
        state.historical_flood_levels.push(rand(Normal(3, 1)) + state.slr_projection)  # Example update
        state.slr_projection += rand(Normal(0.1, 0.05))  # Increment SLR projection
        
        state.year += 1
    end
    return state
end
```



```{julia}
function evaluate_policy(state::HouseElevationState)
    # Calculate metrics such as total cost and damage avoided
    total_costs = state.current_elevation * cost_per_foot  # Example cost calculation
    damage_avoided = calculate_damage_avoided(state)  # Function to calculate damage avoided
    return total_costs, damage_avoided
end
```


```{julia}
initial_state = HouseElevationState(2024, 12, [11.5, 11.8, 12.0], 0.1)
num_years = 30

# Experiment with different policy strategies
results = [simulate_house_elevation(policy_params, initial_state, num_years) for policy_params in policy_param_space]
``` -->